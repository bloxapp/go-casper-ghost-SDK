// Code generated by fastssz. DO NOT EDIT.
package core

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the State object
func (s *State) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the State object to a target array
func (s *State) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(417)

	// Field (0) 'GenesisTime'
	dst = ssz.MarshalUint64(dst, s.GenesisTime)

	// Field (1) 'Slot'
	dst = ssz.MarshalUint64(dst, s.Slot)

	// Field (2) 'LatestBlockHeader'
	if s.LatestBlockHeader == nil {
		s.LatestBlockHeader = new(BlockHeader)
	}
	if dst, err = s.LatestBlockHeader.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'Fork'
	if s.Fork == nil {
		s.Fork = new(Fork)
	}
	if dst, err = s.Fork.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (4) 'BlockRoots'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.BlockRoots) * 32

	// Offset (5) 'StateRoots'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.StateRoots) * 32

	// Offset (6) 'RandaoMix'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.RandaoMix) * 32

	// Offset (7) 'HistoricalRoots'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.HistoricalRoots) * 32

	// Field (8) 'GenesisValidatorsRoot'
	if len(s.GenesisValidatorsRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, s.GenesisValidatorsRoot...)

	// Offset (9) 'PreviousEpochAttestations'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(s.PreviousEpochAttestations); ii++ {
		offset += 4
		offset += s.PreviousEpochAttestations[ii].SizeSSZ()
	}

	// Offset (10) 'CurrentEpochAttestations'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(s.CurrentEpochAttestations); ii++ {
		offset += 4
		offset += s.CurrentEpochAttestations[ii].SizeSSZ()
	}

	// Field (11) 'JustificationBits'
	if len(s.JustificationBits) != 1 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, s.JustificationBits...)

	// Field (12) 'PreviousJustifiedCheckpoint'
	if s.PreviousJustifiedCheckpoint == nil {
		s.PreviousJustifiedCheckpoint = new(Checkpoint)
	}
	if dst, err = s.PreviousJustifiedCheckpoint.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (13) 'CurrentJustifiedCheckpoint'
	if s.CurrentJustifiedCheckpoint == nil {
		s.CurrentJustifiedCheckpoint = new(Checkpoint)
	}
	if dst, err = s.CurrentJustifiedCheckpoint.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (14) 'FinalizedCheckpoint'
	if s.FinalizedCheckpoint == nil {
		s.FinalizedCheckpoint = new(Checkpoint)
	}
	if dst, err = s.FinalizedCheckpoint.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (15) 'Eth1Data'
	if s.Eth1Data == nil {
		s.Eth1Data = new(ETH1Data)
	}
	if dst, err = s.Eth1Data.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (16) 'Eth1DataVotes'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Eth1DataVotes) * 72

	// Field (17) 'Eth1DepositIndex'
	dst = ssz.MarshalUint64(dst, s.Eth1DepositIndex)

	// Offset (18) 'Validators'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Validators) * 122

	// Offset (19) 'Balances'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Balances) * 8

	// Offset (20) 'Slashings'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Slashings) * 8

	// Field (4) 'BlockRoots'
	if len(s.BlockRoots) > 8192 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.BlockRoots); ii++ {
		if len(s.BlockRoots[ii]) != 32 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, s.BlockRoots[ii]...)
	}

	// Field (5) 'StateRoots'
	if len(s.StateRoots) > 8192 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.StateRoots); ii++ {
		if len(s.StateRoots[ii]) != 32 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, s.StateRoots[ii]...)
	}

	// Field (6) 'RandaoMix'
	if len(s.RandaoMix) > 65536 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.RandaoMix); ii++ {
		if len(s.RandaoMix[ii]) != 32 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, s.RandaoMix[ii]...)
	}

	// Field (7) 'HistoricalRoots'
	if len(s.HistoricalRoots) > 16777216 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.HistoricalRoots); ii++ {
		if len(s.HistoricalRoots[ii]) != 32 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, s.HistoricalRoots[ii]...)
	}

	// Field (9) 'PreviousEpochAttestations'
	if len(s.PreviousEpochAttestations) > 1024 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(s.PreviousEpochAttestations)
		for ii := 0; ii < len(s.PreviousEpochAttestations); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += s.PreviousEpochAttestations[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(s.PreviousEpochAttestations); ii++ {
		if dst, err = s.PreviousEpochAttestations[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (10) 'CurrentEpochAttestations'
	if len(s.CurrentEpochAttestations) > 1024 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(s.CurrentEpochAttestations)
		for ii := 0; ii < len(s.CurrentEpochAttestations); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += s.CurrentEpochAttestations[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(s.CurrentEpochAttestations); ii++ {
		if dst, err = s.CurrentEpochAttestations[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (16) 'Eth1DataVotes'
	if len(s.Eth1DataVotes) > 1024 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.Eth1DataVotes); ii++ {
		if dst, err = s.Eth1DataVotes[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (18) 'Validators'
	if len(s.Validators) > 1099511627776 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.Validators); ii++ {
		if dst, err = s.Validators[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (19) 'Balances'
	if len(s.Balances) > 1099511627776 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.Balances); ii++ {
		dst = ssz.MarshalUint64(dst, s.Balances[ii])
	}

	// Field (20) 'Slashings'
	if len(s.Slashings) > 8192 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(s.Slashings); ii++ {
		dst = ssz.MarshalUint64(dst, s.Slashings[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the State object
func (s *State) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 417 {
		return ssz.ErrSize
	}

	tail := buf
	var o4, o5, o6, o7, o9, o10, o16, o18, o19, o20 uint64

	// Field (0) 'GenesisTime'
	s.GenesisTime = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Slot'
	s.Slot = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'LatestBlockHeader'
	if s.LatestBlockHeader == nil {
		s.LatestBlockHeader = new(BlockHeader)
	}
	if err = s.LatestBlockHeader.UnmarshalSSZ(buf[16:128]); err != nil {
		return err
	}

	// Field (3) 'Fork'
	if s.Fork == nil {
		s.Fork = new(Fork)
	}
	if err = s.Fork.UnmarshalSSZ(buf[128:144]); err != nil {
		return err
	}

	// Offset (4) 'BlockRoots'
	if o4 = ssz.ReadOffset(buf[144:148]); o4 > size {
		return ssz.ErrOffset
	}

	// Offset (5) 'StateRoots'
	if o5 = ssz.ReadOffset(buf[148:152]); o5 > size || o4 > o5 {
		return ssz.ErrOffset
	}

	// Offset (6) 'RandaoMix'
	if o6 = ssz.ReadOffset(buf[152:156]); o6 > size || o5 > o6 {
		return ssz.ErrOffset
	}

	// Offset (7) 'HistoricalRoots'
	if o7 = ssz.ReadOffset(buf[156:160]); o7 > size || o6 > o7 {
		return ssz.ErrOffset
	}

	// Field (8) 'GenesisValidatorsRoot'
	if cap(s.GenesisValidatorsRoot) == 0 {
		s.GenesisValidatorsRoot = make([]byte, 0, len(buf[160:192]))
	}
	s.GenesisValidatorsRoot = append(s.GenesisValidatorsRoot, buf[160:192]...)

	// Offset (9) 'PreviousEpochAttestations'
	if o9 = ssz.ReadOffset(buf[192:196]); o9 > size || o7 > o9 {
		return ssz.ErrOffset
	}

	// Offset (10) 'CurrentEpochAttestations'
	if o10 = ssz.ReadOffset(buf[196:200]); o10 > size || o9 > o10 {
		return ssz.ErrOffset
	}

	// Field (11) 'JustificationBits'
	if cap(s.JustificationBits) == 0 {
		s.JustificationBits = make([]byte, 0, len(buf[200:201]))
	}
	s.JustificationBits = append(s.JustificationBits, buf[200:201]...)

	// Field (12) 'PreviousJustifiedCheckpoint'
	if s.PreviousJustifiedCheckpoint == nil {
		s.PreviousJustifiedCheckpoint = new(Checkpoint)
	}
	if err = s.PreviousJustifiedCheckpoint.UnmarshalSSZ(buf[201:241]); err != nil {
		return err
	}

	// Field (13) 'CurrentJustifiedCheckpoint'
	if s.CurrentJustifiedCheckpoint == nil {
		s.CurrentJustifiedCheckpoint = new(Checkpoint)
	}
	if err = s.CurrentJustifiedCheckpoint.UnmarshalSSZ(buf[241:281]); err != nil {
		return err
	}

	// Field (14) 'FinalizedCheckpoint'
	if s.FinalizedCheckpoint == nil {
		s.FinalizedCheckpoint = new(Checkpoint)
	}
	if err = s.FinalizedCheckpoint.UnmarshalSSZ(buf[281:321]); err != nil {
		return err
	}

	// Field (15) 'Eth1Data'
	if s.Eth1Data == nil {
		s.Eth1Data = new(ETH1Data)
	}
	if err = s.Eth1Data.UnmarshalSSZ(buf[321:393]); err != nil {
		return err
	}

	// Offset (16) 'Eth1DataVotes'
	if o16 = ssz.ReadOffset(buf[393:397]); o16 > size || o10 > o16 {
		return ssz.ErrOffset
	}

	// Field (17) 'Eth1DepositIndex'
	s.Eth1DepositIndex = ssz.UnmarshallUint64(buf[397:405])

	// Offset (18) 'Validators'
	if o18 = ssz.ReadOffset(buf[405:409]); o18 > size || o16 > o18 {
		return ssz.ErrOffset
	}

	// Offset (19) 'Balances'
	if o19 = ssz.ReadOffset(buf[409:413]); o19 > size || o18 > o19 {
		return ssz.ErrOffset
	}

	// Offset (20) 'Slashings'
	if o20 = ssz.ReadOffset(buf[413:417]); o20 > size || o19 > o20 {
		return ssz.ErrOffset
	}

	// Field (4) 'BlockRoots'
	{
		buf = tail[o4:o5]
		num, err := ssz.DivideInt2(len(buf), 32, 8192)
		if err != nil {
			return err
		}
		s.BlockRoots = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(s.BlockRoots[ii]) == 0 {
				s.BlockRoots[ii] = make([]byte, 0, len(buf[ii*32:(ii+1)*32]))
			}
			s.BlockRoots[ii] = append(s.BlockRoots[ii], buf[ii*32:(ii+1)*32]...)
		}
	}

	// Field (5) 'StateRoots'
	{
		buf = tail[o5:o6]
		num, err := ssz.DivideInt2(len(buf), 32, 8192)
		if err != nil {
			return err
		}
		s.StateRoots = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(s.StateRoots[ii]) == 0 {
				s.StateRoots[ii] = make([]byte, 0, len(buf[ii*32:(ii+1)*32]))
			}
			s.StateRoots[ii] = append(s.StateRoots[ii], buf[ii*32:(ii+1)*32]...)
		}
	}

	// Field (6) 'RandaoMix'
	{
		buf = tail[o6:o7]
		num, err := ssz.DivideInt2(len(buf), 32, 65536)
		if err != nil {
			return err
		}
		s.RandaoMix = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(s.RandaoMix[ii]) == 0 {
				s.RandaoMix[ii] = make([]byte, 0, len(buf[ii*32:(ii+1)*32]))
			}
			s.RandaoMix[ii] = append(s.RandaoMix[ii], buf[ii*32:(ii+1)*32]...)
		}
	}

	// Field (7) 'HistoricalRoots'
	{
		buf = tail[o7:o9]
		num, err := ssz.DivideInt2(len(buf), 32, 16777216)
		if err != nil {
			return err
		}
		s.HistoricalRoots = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(s.HistoricalRoots[ii]) == 0 {
				s.HistoricalRoots[ii] = make([]byte, 0, len(buf[ii*32:(ii+1)*32]))
			}
			s.HistoricalRoots[ii] = append(s.HistoricalRoots[ii], buf[ii*32:(ii+1)*32]...)
		}
	}

	// Field (9) 'PreviousEpochAttestations'
	{
		buf = tail[o9:o10]
		num, err := ssz.DecodeDynamicLength(buf, 1024)
		if err != nil {
			return err
		}
		s.PreviousEpochAttestations = make([]*PendingAttestation, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if s.PreviousEpochAttestations[indx] == nil {
				s.PreviousEpochAttestations[indx] = new(PendingAttestation)
			}
			if err = s.PreviousEpochAttestations[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (10) 'CurrentEpochAttestations'
	{
		buf = tail[o10:o16]
		num, err := ssz.DecodeDynamicLength(buf, 1024)
		if err != nil {
			return err
		}
		s.CurrentEpochAttestations = make([]*PendingAttestation, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if s.CurrentEpochAttestations[indx] == nil {
				s.CurrentEpochAttestations[indx] = new(PendingAttestation)
			}
			if err = s.CurrentEpochAttestations[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (16) 'Eth1DataVotes'
	{
		buf = tail[o16:o18]
		num, err := ssz.DivideInt2(len(buf), 72, 1024)
		if err != nil {
			return err
		}
		s.Eth1DataVotes = make([]*ETH1Data, num)
		for ii := 0; ii < num; ii++ {
			if s.Eth1DataVotes[ii] == nil {
				s.Eth1DataVotes[ii] = new(ETH1Data)
			}
			if err = s.Eth1DataVotes[ii].UnmarshalSSZ(buf[ii*72 : (ii+1)*72]); err != nil {
				return err
			}
		}
	}

	// Field (18) 'Validators'
	{
		buf = tail[o18:o19]
		num, err := ssz.DivideInt2(len(buf), 122, 1099511627776)
		if err != nil {
			return err
		}
		s.Validators = make([]*Validator, num)
		for ii := 0; ii < num; ii++ {
			if s.Validators[ii] == nil {
				s.Validators[ii] = new(Validator)
			}
			if err = s.Validators[ii].UnmarshalSSZ(buf[ii*122 : (ii+1)*122]); err != nil {
				return err
			}
		}
	}

	// Field (19) 'Balances'
	{
		buf = tail[o19:o20]
		num, err := ssz.DivideInt2(len(buf), 8, 1099511627776)
		if err != nil {
			return err
		}
		s.Balances = ssz.ExtendUint64(s.Balances, num)
		for ii := 0; ii < num; ii++ {
			s.Balances[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}

	// Field (20) 'Slashings'
	{
		buf = tail[o20:]
		num, err := ssz.DivideInt2(len(buf), 8, 8192)
		if err != nil {
			return err
		}
		s.Slashings = ssz.ExtendUint64(s.Slashings, num)
		for ii := 0; ii < num; ii++ {
			s.Slashings[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the State object
func (s *State) SizeSSZ() (size int) {
	size = 417

	// Field (4) 'BlockRoots'
	size += len(s.BlockRoots) * 32

	// Field (5) 'StateRoots'
	size += len(s.StateRoots) * 32

	// Field (6) 'RandaoMix'
	size += len(s.RandaoMix) * 32

	// Field (7) 'HistoricalRoots'
	size += len(s.HistoricalRoots) * 32

	// Field (9) 'PreviousEpochAttestations'
	for ii := 0; ii < len(s.PreviousEpochAttestations); ii++ {
		size += 4
		size += s.PreviousEpochAttestations[ii].SizeSSZ()
	}

	// Field (10) 'CurrentEpochAttestations'
	for ii := 0; ii < len(s.CurrentEpochAttestations); ii++ {
		size += 4
		size += s.CurrentEpochAttestations[ii].SizeSSZ()
	}

	// Field (16) 'Eth1DataVotes'
	size += len(s.Eth1DataVotes) * 72

	// Field (18) 'Validators'
	size += len(s.Validators) * 122

	// Field (19) 'Balances'
	size += len(s.Balances) * 8

	// Field (20) 'Slashings'
	size += len(s.Slashings) * 8

	return
}

// HashTreeRoot ssz hashes the State object
func (s *State) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the State object with a hasher
func (s *State) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'GenesisTime'
	hh.PutUint64(s.GenesisTime)

	// Field (1) 'Slot'
	hh.PutUint64(s.Slot)

	// Field (2) 'LatestBlockHeader'
	if err = s.LatestBlockHeader.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'Fork'
	if err = s.Fork.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'BlockRoots'
	{
		if len(s.BlockRoots) > 8192 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range s.BlockRoots {
			if len(i) != 32 {
				err = ssz.ErrBytesLength
				return
			}
			hh.Append(i)
		}
		numItems := uint64(len(s.BlockRoots))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(8192, numItems, 32))
	}

	// Field (5) 'StateRoots'
	{
		if len(s.StateRoots) > 8192 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range s.StateRoots {
			if len(i) != 32 {
				err = ssz.ErrBytesLength
				return
			}
			hh.Append(i)
		}
		numItems := uint64(len(s.StateRoots))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(8192, numItems, 32))
	}

	// Field (6) 'RandaoMix'
	{
		if len(s.RandaoMix) > 65536 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range s.RandaoMix {
			if len(i) != 32 {
				err = ssz.ErrBytesLength
				return
			}
			hh.Append(i)
		}
		numItems := uint64(len(s.RandaoMix))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(65536, numItems, 32))
	}

	// Field (7) 'HistoricalRoots'
	{
		if len(s.HistoricalRoots) > 16777216 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range s.HistoricalRoots {
			if len(i) != 32 {
				err = ssz.ErrBytesLength
				return
			}
			hh.Append(i)
		}
		numItems := uint64(len(s.HistoricalRoots))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(16777216, numItems, 32))
	}

	// Field (8) 'GenesisValidatorsRoot'
	if len(s.GenesisValidatorsRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(s.GenesisValidatorsRoot)

	// Field (9) 'PreviousEpochAttestations'
	{
		subIndx := hh.Index()
		num := uint64(len(s.PreviousEpochAttestations))
		if num > 1024 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = s.PreviousEpochAttestations[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1024)
	}

	// Field (10) 'CurrentEpochAttestations'
	{
		subIndx := hh.Index()
		num := uint64(len(s.CurrentEpochAttestations))
		if num > 1024 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = s.CurrentEpochAttestations[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1024)
	}

	// Field (11) 'JustificationBits'
	if len(s.JustificationBits) != 1 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(s.JustificationBits)

	// Field (12) 'PreviousJustifiedCheckpoint'
	if err = s.PreviousJustifiedCheckpoint.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (13) 'CurrentJustifiedCheckpoint'
	if err = s.CurrentJustifiedCheckpoint.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (14) 'FinalizedCheckpoint'
	if err = s.FinalizedCheckpoint.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (15) 'Eth1Data'
	if err = s.Eth1Data.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (16) 'Eth1DataVotes'
	{
		subIndx := hh.Index()
		num := uint64(len(s.Eth1DataVotes))
		if num > 1024 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = s.Eth1DataVotes[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1024)
	}

	// Field (17) 'Eth1DepositIndex'
	hh.PutUint64(s.Eth1DepositIndex)

	// Field (18) 'Validators'
	{
		subIndx := hh.Index()
		num := uint64(len(s.Validators))
		if num > 1099511627776 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for i := uint64(0); i < num; i++ {
			if err = s.Validators[i].HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1099511627776)
	}

	// Field (19) 'Balances'
	{
		if len(s.Balances) > 1099511627776 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range s.Balances {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(s.Balances))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(1099511627776, numItems, 8))
	}

	// Field (20) 'Slashings'
	{
		if len(s.Slashings) > 8192 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range s.Slashings {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(s.Slashings))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(8192, numItems, 8))
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the Validator object
func (v *Validator) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the Validator object to a target array
func (v *Validator) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'PubKey'
	if len(v.PubKey) != 48 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, v.PubKey...)

	// Field (1) 'EffectiveBalance'
	dst = ssz.MarshalUint64(dst, v.EffectiveBalance)

	// Field (2) 'Slashed'
	dst = ssz.MarshalBool(dst, v.Slashed)

	// Field (3) 'Active'
	dst = ssz.MarshalBool(dst, v.Active)

	// Field (4) 'ExitEpoch'
	dst = ssz.MarshalUint64(dst, v.ExitEpoch)

	// Field (5) 'ActivationEpoch'
	dst = ssz.MarshalUint64(dst, v.ActivationEpoch)

	// Field (6) 'ActivationEligibilityEpoch'
	dst = ssz.MarshalUint64(dst, v.ActivationEligibilityEpoch)

	// Field (7) 'WithdrawableEpoch'
	dst = ssz.MarshalUint64(dst, v.WithdrawableEpoch)

	// Field (8) 'WithdrawalCredentials'
	if len(v.WithdrawalCredentials) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, v.WithdrawalCredentials...)

	return
}

// UnmarshalSSZ ssz unmarshals the Validator object
func (v *Validator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 122 {
		return ssz.ErrSize
	}

	// Field (0) 'PubKey'
	if cap(v.PubKey) == 0 {
		v.PubKey = make([]byte, 0, len(buf[0:48]))
	}
	v.PubKey = append(v.PubKey, buf[0:48]...)

	// Field (1) 'EffectiveBalance'
	v.EffectiveBalance = ssz.UnmarshallUint64(buf[48:56])

	// Field (2) 'Slashed'
	v.Slashed = ssz.UnmarshalBool(buf[56:57])

	// Field (3) 'Active'
	v.Active = ssz.UnmarshalBool(buf[57:58])

	// Field (4) 'ExitEpoch'
	v.ExitEpoch = ssz.UnmarshallUint64(buf[58:66])

	// Field (5) 'ActivationEpoch'
	v.ActivationEpoch = ssz.UnmarshallUint64(buf[66:74])

	// Field (6) 'ActivationEligibilityEpoch'
	v.ActivationEligibilityEpoch = ssz.UnmarshallUint64(buf[74:82])

	// Field (7) 'WithdrawableEpoch'
	v.WithdrawableEpoch = ssz.UnmarshallUint64(buf[82:90])

	// Field (8) 'WithdrawalCredentials'
	if cap(v.WithdrawalCredentials) == 0 {
		v.WithdrawalCredentials = make([]byte, 0, len(buf[90:122]))
	}
	v.WithdrawalCredentials = append(v.WithdrawalCredentials, buf[90:122]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Validator object
func (v *Validator) SizeSSZ() (size int) {
	size = 122
	return
}

// HashTreeRoot ssz hashes the Validator object
func (v *Validator) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the Validator object with a hasher
func (v *Validator) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'PubKey'
	if len(v.PubKey) != 48 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(v.PubKey)

	// Field (1) 'EffectiveBalance'
	hh.PutUint64(v.EffectiveBalance)

	// Field (2) 'Slashed'
	hh.PutBool(v.Slashed)

	// Field (3) 'Active'
	hh.PutBool(v.Active)

	// Field (4) 'ExitEpoch'
	hh.PutUint64(v.ExitEpoch)

	// Field (5) 'ActivationEpoch'
	hh.PutUint64(v.ActivationEpoch)

	// Field (6) 'ActivationEligibilityEpoch'
	hh.PutUint64(v.ActivationEligibilityEpoch)

	// Field (7) 'WithdrawableEpoch'
	hh.PutUint64(v.WithdrawableEpoch)

	// Field (8) 'WithdrawalCredentials'
	if len(v.WithdrawalCredentials) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(v.WithdrawalCredentials)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the Fork object
func (f *Fork) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(f)
}

// MarshalSSZTo ssz marshals the Fork object to a target array
func (f *Fork) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'PreviousVersion'
	if len(f.PreviousVersion) != 4 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, f.PreviousVersion...)

	// Field (1) 'CurrentVersion'
	if len(f.CurrentVersion) != 4 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, f.CurrentVersion...)

	// Field (2) 'Epoch'
	dst = ssz.MarshalUint64(dst, f.Epoch)

	return
}

// UnmarshalSSZ ssz unmarshals the Fork object
func (f *Fork) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 16 {
		return ssz.ErrSize
	}

	// Field (0) 'PreviousVersion'
	if cap(f.PreviousVersion) == 0 {
		f.PreviousVersion = make([]byte, 0, len(buf[0:4]))
	}
	f.PreviousVersion = append(f.PreviousVersion, buf[0:4]...)

	// Field (1) 'CurrentVersion'
	if cap(f.CurrentVersion) == 0 {
		f.CurrentVersion = make([]byte, 0, len(buf[4:8]))
	}
	f.CurrentVersion = append(f.CurrentVersion, buf[4:8]...)

	// Field (2) 'Epoch'
	f.Epoch = ssz.UnmarshallUint64(buf[8:16])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Fork object
func (f *Fork) SizeSSZ() (size int) {
	size = 16
	return
}

// HashTreeRoot ssz hashes the Fork object
func (f *Fork) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(f)
}

// HashTreeRootWith ssz hashes the Fork object with a hasher
func (f *Fork) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'PreviousVersion'
	if len(f.PreviousVersion) != 4 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(f.PreviousVersion)

	// Field (1) 'CurrentVersion'
	if len(f.CurrentVersion) != 4 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(f.CurrentVersion)

	// Field (2) 'Epoch'
	hh.PutUint64(f.Epoch)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the ForkData object
func (f *ForkData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(f)
}

// MarshalSSZTo ssz marshals the ForkData object to a target array
func (f *ForkData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'CurrentVersion'
	if len(f.CurrentVersion) != 4 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, f.CurrentVersion...)

	// Field (1) 'GenesisValidatorRoot'
	if len(f.GenesisValidatorRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, f.GenesisValidatorRoot...)

	return
}

// UnmarshalSSZ ssz unmarshals the ForkData object
func (f *ForkData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 36 {
		return ssz.ErrSize
	}

	// Field (0) 'CurrentVersion'
	if cap(f.CurrentVersion) == 0 {
		f.CurrentVersion = make([]byte, 0, len(buf[0:4]))
	}
	f.CurrentVersion = append(f.CurrentVersion, buf[0:4]...)

	// Field (1) 'GenesisValidatorRoot'
	if cap(f.GenesisValidatorRoot) == 0 {
		f.GenesisValidatorRoot = make([]byte, 0, len(buf[4:36]))
	}
	f.GenesisValidatorRoot = append(f.GenesisValidatorRoot, buf[4:36]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ForkData object
func (f *ForkData) SizeSSZ() (size int) {
	size = 36
	return
}

// HashTreeRoot ssz hashes the ForkData object
func (f *ForkData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(f)
}

// HashTreeRootWith ssz hashes the ForkData object with a hasher
func (f *ForkData) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'CurrentVersion'
	if len(f.CurrentVersion) != 4 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(f.CurrentVersion)

	// Field (1) 'GenesisValidatorRoot'
	if len(f.GenesisValidatorRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(f.GenesisValidatorRoot)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the HistoricalBatch object
func (h *HistoricalBatch) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(h)
}

// MarshalSSZTo ssz marshals the HistoricalBatch object to a target array
func (h *HistoricalBatch) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Offset (0) 'BlockRoots'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(h.BlockRoots) * 32

	// Offset (1) 'StateRoots'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(h.StateRoots) * 32

	// Field (0) 'BlockRoots'
	if len(h.BlockRoots) > 8192 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(h.BlockRoots); ii++ {
		if len(h.BlockRoots[ii]) != 32 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, h.BlockRoots[ii]...)
	}

	// Field (1) 'StateRoots'
	if len(h.StateRoots) > 8192 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(h.StateRoots); ii++ {
		if len(h.StateRoots[ii]) != 32 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, h.StateRoots[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the HistoricalBatch object
func (h *HistoricalBatch) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'BlockRoots'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Offset (1) 'StateRoots'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (0) 'BlockRoots'
	{
		buf = tail[o0:o1]
		num, err := ssz.DivideInt2(len(buf), 32, 8192)
		if err != nil {
			return err
		}
		h.BlockRoots = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(h.BlockRoots[ii]) == 0 {
				h.BlockRoots[ii] = make([]byte, 0, len(buf[ii*32:(ii+1)*32]))
			}
			h.BlockRoots[ii] = append(h.BlockRoots[ii], buf[ii*32:(ii+1)*32]...)
		}
	}

	// Field (1) 'StateRoots'
	{
		buf = tail[o1:]
		num, err := ssz.DivideInt2(len(buf), 32, 8192)
		if err != nil {
			return err
		}
		h.StateRoots = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(h.StateRoots[ii]) == 0 {
				h.StateRoots[ii] = make([]byte, 0, len(buf[ii*32:(ii+1)*32]))
			}
			h.StateRoots[ii] = append(h.StateRoots[ii], buf[ii*32:(ii+1)*32]...)
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the HistoricalBatch object
func (h *HistoricalBatch) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'BlockRoots'
	size += len(h.BlockRoots) * 32

	// Field (1) 'StateRoots'
	size += len(h.StateRoots) * 32

	return
}

// HashTreeRoot ssz hashes the HistoricalBatch object
func (h *HistoricalBatch) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(h)
}

// HashTreeRootWith ssz hashes the HistoricalBatch object with a hasher
func (h *HistoricalBatch) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'BlockRoots'
	{
		if len(h.BlockRoots) > 8192 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range h.BlockRoots {
			if len(i) != 32 {
				err = ssz.ErrBytesLength
				return
			}
			hh.Append(i)
		}
		numItems := uint64(len(h.BlockRoots))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(8192, numItems, 32))
	}

	// Field (1) 'StateRoots'
	{
		if len(h.StateRoots) > 8192 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range h.StateRoots {
			if len(i) != 32 {
				err = ssz.ErrBytesLength
				return
			}
			hh.Append(i)
		}
		numItems := uint64(len(h.StateRoots))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(8192, numItems, 32))
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the BlockHeader object
func (b *BlockHeader) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BlockHeader object to a target array
func (b *BlockHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, b.Slot)

	// Field (1) 'ProposerIndex'
	dst = ssz.MarshalUint64(dst, b.ProposerIndex)

	// Field (2) 'ParentRoot'
	if len(b.ParentRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, b.ParentRoot...)

	// Field (3) 'StateRoot'
	if len(b.StateRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, b.StateRoot...)

	// Field (4) 'BodyRoot'
	if len(b.BodyRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, b.BodyRoot...)

	return
}

// UnmarshalSSZ ssz unmarshals the BlockHeader object
func (b *BlockHeader) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 112 {
		return ssz.ErrSize
	}

	// Field (0) 'Slot'
	b.Slot = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'ProposerIndex'
	b.ProposerIndex = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'ParentRoot'
	if cap(b.ParentRoot) == 0 {
		b.ParentRoot = make([]byte, 0, len(buf[16:48]))
	}
	b.ParentRoot = append(b.ParentRoot, buf[16:48]...)

	// Field (3) 'StateRoot'
	if cap(b.StateRoot) == 0 {
		b.StateRoot = make([]byte, 0, len(buf[48:80]))
	}
	b.StateRoot = append(b.StateRoot, buf[48:80]...)

	// Field (4) 'BodyRoot'
	if cap(b.BodyRoot) == 0 {
		b.BodyRoot = make([]byte, 0, len(buf[80:112]))
	}
	b.BodyRoot = append(b.BodyRoot, buf[80:112]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BlockHeader object
func (b *BlockHeader) SizeSSZ() (size int) {
	size = 112
	return
}

// HashTreeRoot ssz hashes the BlockHeader object
func (b *BlockHeader) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BlockHeader object with a hasher
func (b *BlockHeader) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(b.Slot)

	// Field (1) 'ProposerIndex'
	hh.PutUint64(b.ProposerIndex)

	// Field (2) 'ParentRoot'
	if len(b.ParentRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(b.ParentRoot)

	// Field (3) 'StateRoot'
	if len(b.StateRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(b.StateRoot)

	// Field (4) 'BodyRoot'
	if len(b.BodyRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(b.BodyRoot)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the ETH1Data object
func (e *ETH1Data) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ETH1Data object to a target array
func (e *ETH1Data) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'DepositRoot'
	if len(e.DepositRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.DepositRoot...)

	// Field (1) 'DepositCount'
	dst = ssz.MarshalUint64(dst, e.DepositCount)

	// Field (2) 'BlockHash'
	if len(e.BlockHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.BlockHash...)

	return
}

// UnmarshalSSZ ssz unmarshals the ETH1Data object
func (e *ETH1Data) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 72 {
		return ssz.ErrSize
	}

	// Field (0) 'DepositRoot'
	if cap(e.DepositRoot) == 0 {
		e.DepositRoot = make([]byte, 0, len(buf[0:32]))
	}
	e.DepositRoot = append(e.DepositRoot, buf[0:32]...)

	// Field (1) 'DepositCount'
	e.DepositCount = ssz.UnmarshallUint64(buf[32:40])

	// Field (2) 'BlockHash'
	if cap(e.BlockHash) == 0 {
		e.BlockHash = make([]byte, 0, len(buf[40:72]))
	}
	e.BlockHash = append(e.BlockHash, buf[40:72]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ETH1Data object
func (e *ETH1Data) SizeSSZ() (size int) {
	size = 72
	return
}

// HashTreeRoot ssz hashes the ETH1Data object
func (e *ETH1Data) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ETH1Data object with a hasher
func (e *ETH1Data) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'DepositRoot'
	if len(e.DepositRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.DepositRoot)

	// Field (1) 'DepositCount'
	hh.PutUint64(e.DepositCount)

	// Field (2) 'BlockHash'
	if len(e.BlockHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.BlockHash)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the PendingAttestation object
func (p *PendingAttestation) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PendingAttestation object to a target array
func (p *PendingAttestation) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(148)

	// Offset (0) 'AggregationBits'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.AggregationBits)

	// Field (1) 'Data'
	if p.Data == nil {
		p.Data = new(AttestationData)
	}
	if dst, err = p.Data.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'InclusionDelay'
	dst = ssz.MarshalUint64(dst, p.InclusionDelay)

	// Field (3) 'ProposerIndex'
	dst = ssz.MarshalUint64(dst, p.ProposerIndex)

	// Field (0) 'AggregationBits'
	if len(p.AggregationBits) > 2048 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, p.AggregationBits...)

	return
}

// UnmarshalSSZ ssz unmarshals the PendingAttestation object
func (p *PendingAttestation) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 148 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'AggregationBits'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Field (1) 'Data'
	if p.Data == nil {
		p.Data = new(AttestationData)
	}
	if err = p.Data.UnmarshalSSZ(buf[4:132]); err != nil {
		return err
	}

	// Field (2) 'InclusionDelay'
	p.InclusionDelay = ssz.UnmarshallUint64(buf[132:140])

	// Field (3) 'ProposerIndex'
	p.ProposerIndex = ssz.UnmarshallUint64(buf[140:148])

	// Field (0) 'AggregationBits'
	{
		buf = tail[o0:]
		if err = ssz.ValidateBitlist(buf, 2048); err != nil {
			return err
		}
		if cap(p.AggregationBits) == 0 {
			p.AggregationBits = make([]byte, 0, len(buf))
		}
		p.AggregationBits = append(p.AggregationBits, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PendingAttestation object
func (p *PendingAttestation) SizeSSZ() (size int) {
	size = 148

	// Field (0) 'AggregationBits'
	size += len(p.AggregationBits)

	return
}

// HashTreeRoot ssz hashes the PendingAttestation object
func (p *PendingAttestation) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PendingAttestation object with a hasher
func (p *PendingAttestation) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'AggregationBits'
	if len(p.AggregationBits) == 0 {
		err = ssz.ErrEmptyBitlist
		return
	}
	hh.PutBitlist(p.AggregationBits, 2048)

	// Field (1) 'Data'
	if err = p.Data.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'InclusionDelay'
	hh.PutUint64(p.InclusionDelay)

	// Field (3) 'ProposerIndex'
	hh.PutUint64(p.ProposerIndex)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the AttestationData object
func (a *AttestationData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the AttestationData object to a target array
func (a *AttestationData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, a.Slot)

	// Field (1) 'CommitteeIndex'
	dst = ssz.MarshalUint64(dst, a.CommitteeIndex)

	// Field (2) 'BeaconBlockRoot'
	if len(a.BeaconBlockRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, a.BeaconBlockRoot...)

	// Field (3) 'Source'
	if a.Source == nil {
		a.Source = new(Checkpoint)
	}
	if dst, err = a.Source.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (4) 'Target'
	if a.Target == nil {
		a.Target = new(Checkpoint)
	}
	if dst, err = a.Target.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the AttestationData object
func (a *AttestationData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 128 {
		return ssz.ErrSize
	}

	// Field (0) 'Slot'
	a.Slot = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'CommitteeIndex'
	a.CommitteeIndex = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'BeaconBlockRoot'
	if cap(a.BeaconBlockRoot) == 0 {
		a.BeaconBlockRoot = make([]byte, 0, len(buf[16:48]))
	}
	a.BeaconBlockRoot = append(a.BeaconBlockRoot, buf[16:48]...)

	// Field (3) 'Source'
	if a.Source == nil {
		a.Source = new(Checkpoint)
	}
	if err = a.Source.UnmarshalSSZ(buf[48:88]); err != nil {
		return err
	}

	// Field (4) 'Target'
	if a.Target == nil {
		a.Target = new(Checkpoint)
	}
	if err = a.Target.UnmarshalSSZ(buf[88:128]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AttestationData object
func (a *AttestationData) SizeSSZ() (size int) {
	size = 128
	return
}

// HashTreeRoot ssz hashes the AttestationData object
func (a *AttestationData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the AttestationData object with a hasher
func (a *AttestationData) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(a.Slot)

	// Field (1) 'CommitteeIndex'
	hh.PutUint64(a.CommitteeIndex)

	// Field (2) 'BeaconBlockRoot'
	if len(a.BeaconBlockRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(a.BeaconBlockRoot)

	// Field (3) 'Source'
	if err = a.Source.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'Target'
	if err = a.Target.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the Checkpoint object
func (c *Checkpoint) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the Checkpoint object to a target array
func (c *Checkpoint) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Epoch'
	dst = ssz.MarshalUint64(dst, c.Epoch)

	// Field (1) 'Root'
	if len(c.Root) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, c.Root...)

	return
}

// UnmarshalSSZ ssz unmarshals the Checkpoint object
func (c *Checkpoint) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 40 {
		return ssz.ErrSize
	}

	// Field (0) 'Epoch'
	c.Epoch = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Root'
	if cap(c.Root) == 0 {
		c.Root = make([]byte, 0, len(buf[8:40]))
	}
	c.Root = append(c.Root, buf[8:40]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Checkpoint object
func (c *Checkpoint) SizeSSZ() (size int) {
	size = 40
	return
}

// HashTreeRoot ssz hashes the Checkpoint object
func (c *Checkpoint) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the Checkpoint object with a hasher
func (c *Checkpoint) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Epoch'
	hh.PutUint64(c.Epoch)

	// Field (1) 'Root'
	if len(c.Root) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(c.Root)

	hh.Merkleize(indx)
	return
}
