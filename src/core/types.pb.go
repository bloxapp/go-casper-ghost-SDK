// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/core/types.proto

package core

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	github_com_prysmaticlabs_go_bitfield "github.com/prysmaticlabs/go-bitfield"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type State struct {
	// versioning
	GenesisTime       uint64       `protobuf:"varint,10,opt,name=GenesisTime,proto3" json:"GenesisTime,omitempty"`
	Slot              uint64       `protobuf:"varint,11,opt,name=Slot,proto3" json:"Slot,omitempty"`
	LatestBlockHeader *BlockHeader `protobuf:"bytes,12,opt,name=LatestBlockHeader,proto3" json:"LatestBlockHeader,omitempty"`
	Fork              *Fork        `protobuf:"bytes,13,opt,name=Fork,proto3" json:"Fork,omitempty"`
	// past
	BlockRoots            [][]byte `protobuf:"bytes,21,rep,name=BlockRoots,proto3" json:"BlockRoots,omitempty" ssz-size:"?,32" ssz-max:"8192"`
	StateRoots            [][]byte `protobuf:"bytes,22,rep,name=StateRoots,proto3" json:"StateRoots,omitempty" ssz-size:"?,32" ssz-max:"8192"`
	RandaoMix             [][]byte `protobuf:"bytes,24,rep,name=RandaoMix,proto3" json:"RandaoMix,omitempty" ssz-size:"?,32" ssz-max:"65536"`
	HistoricalRoots       [][]byte `protobuf:"bytes,25,rep,name=HistoricalRoots,proto3" json:"HistoricalRoots,omitempty" ssz-size:"?,32" ssz-max:"16777216"`
	GenesisValidatorsRoot []byte   `protobuf:"bytes,26,opt,name=GenesisValidatorsRoot,proto3" json:"GenesisValidatorsRoot,omitempty" ssz-size:"32"`
	// Finalization & justification
	PreviousEpochAttestations   []*PendingAttestation                           `protobuf:"bytes,31,rep,name=PreviousEpochAttestations,proto3" json:"PreviousEpochAttestations,omitempty" ssz-max:"1024"`
	CurrentEpochAttestations    []*PendingAttestation                           `protobuf:"bytes,32,rep,name=CurrentEpochAttestations,proto3" json:"CurrentEpochAttestations,omitempty" ssz-max:"1024"`
	JustificationBits           github_com_prysmaticlabs_go_bitfield.Bitvector4 `protobuf:"bytes,33,opt,name=JustificationBits,proto3,casttype=github.com/prysmaticlabs/go-bitfield.Bitvector4" json:"JustificationBits,omitempty" ssz-size:"1"`
	PreviousJustifiedCheckpoint *Checkpoint                                     `protobuf:"bytes,34,opt,name=PreviousJustifiedCheckpoint,proto3" json:"PreviousJustifiedCheckpoint,omitempty"`
	CurrentJustifiedCheckpoint  *Checkpoint                                     `protobuf:"bytes,35,opt,name=CurrentJustifiedCheckpoint,proto3" json:"CurrentJustifiedCheckpoint,omitempty"`
	FinalizedCheckpoint         *Checkpoint                                     `protobuf:"bytes,36,opt,name=FinalizedCheckpoint,proto3" json:"FinalizedCheckpoint,omitempty"`
	// eth 1
	Eth1Data         *ETH1Data   `protobuf:"bytes,40,opt,name=Eth1Data,proto3" json:"Eth1Data,omitempty"`
	Eth1DataVotes    []*ETH1Data `protobuf:"bytes,41,rep,name=Eth1DataVotes,proto3" json:"Eth1DataVotes,omitempty" ssz-max:"16"`
	Eth1DepositIndex uint64      `protobuf:"varint,42,opt,name=Eth1DepositIndex,proto3" json:"Eth1DepositIndex,omitempty"`
	// network
	Validators []*Validator `protobuf:"bytes,50,rep,name=Validators,proto3" json:"Validators,omitempty" ssz-max:"1099511627776"`
	Balances   []uint64     `protobuf:"varint,51,rep,packed,name=Balances,proto3" json:"Balances,omitempty" ssz-max:"1099511627776"`
	// slashings
	Slashings            []uint64 `protobuf:"varint,60,rep,packed,name=Slashings,proto3" json:"Slashings,omitempty" ssz-max:"8192"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_05ece1b682f6d016, []int{0}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetGenesisTime() uint64 {
	if m != nil {
		return m.GenesisTime
	}
	return 0
}

func (m *State) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *State) GetLatestBlockHeader() *BlockHeader {
	if m != nil {
		return m.LatestBlockHeader
	}
	return nil
}

func (m *State) GetFork() *Fork {
	if m != nil {
		return m.Fork
	}
	return nil
}

func (m *State) GetBlockRoots() [][]byte {
	if m != nil {
		return m.BlockRoots
	}
	return nil
}

func (m *State) GetStateRoots() [][]byte {
	if m != nil {
		return m.StateRoots
	}
	return nil
}

func (m *State) GetRandaoMix() [][]byte {
	if m != nil {
		return m.RandaoMix
	}
	return nil
}

func (m *State) GetHistoricalRoots() [][]byte {
	if m != nil {
		return m.HistoricalRoots
	}
	return nil
}

func (m *State) GetGenesisValidatorsRoot() []byte {
	if m != nil {
		return m.GenesisValidatorsRoot
	}
	return nil
}

func (m *State) GetPreviousEpochAttestations() []*PendingAttestation {
	if m != nil {
		return m.PreviousEpochAttestations
	}
	return nil
}

func (m *State) GetCurrentEpochAttestations() []*PendingAttestation {
	if m != nil {
		return m.CurrentEpochAttestations
	}
	return nil
}

func (m *State) GetJustificationBits() github_com_prysmaticlabs_go_bitfield.Bitvector4 {
	if m != nil {
		return m.JustificationBits
	}
	return nil
}

func (m *State) GetPreviousJustifiedCheckpoint() *Checkpoint {
	if m != nil {
		return m.PreviousJustifiedCheckpoint
	}
	return nil
}

func (m *State) GetCurrentJustifiedCheckpoint() *Checkpoint {
	if m != nil {
		return m.CurrentJustifiedCheckpoint
	}
	return nil
}

func (m *State) GetFinalizedCheckpoint() *Checkpoint {
	if m != nil {
		return m.FinalizedCheckpoint
	}
	return nil
}

func (m *State) GetEth1Data() *ETH1Data {
	if m != nil {
		return m.Eth1Data
	}
	return nil
}

func (m *State) GetEth1DataVotes() []*ETH1Data {
	if m != nil {
		return m.Eth1DataVotes
	}
	return nil
}

func (m *State) GetEth1DepositIndex() uint64 {
	if m != nil {
		return m.Eth1DepositIndex
	}
	return 0
}

func (m *State) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *State) GetBalances() []uint64 {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *State) GetSlashings() []uint64 {
	if m != nil {
		return m.Slashings
	}
	return nil
}

type Validator struct {
	PubKey                     []byte   `protobuf:"bytes,2,opt,name=PubKey,proto3" json:"PubKey,omitempty" ssz-size:"48"`
	EffectiveBalance           uint64   `protobuf:"varint,3,opt,name=EffectiveBalance,proto3" json:"EffectiveBalance,omitempty"`
	Slashed                    bool     `protobuf:"varint,5,opt,name=Slashed,proto3" json:"Slashed,omitempty"`
	Active                     bool     `protobuf:"varint,6,opt,name=Active,proto3" json:"Active,omitempty"`
	ExitEpoch                  uint64   `protobuf:"varint,7,opt,name=ExitEpoch,proto3" json:"ExitEpoch,omitempty"`
	ActivationEpoch            uint64   `protobuf:"varint,8,opt,name=ActivationEpoch,proto3" json:"ActivationEpoch,omitempty"`
	ActivationEligibilityEpoch uint64   `protobuf:"varint,9,opt,name=ActivationEligibilityEpoch,proto3" json:"ActivationEligibilityEpoch,omitempty"`
	WithdrawableEpoch          uint64   `protobuf:"varint,10,opt,name=WithdrawableEpoch,proto3" json:"WithdrawableEpoch,omitempty"`
	WithdrawalCredentials      []byte   `protobuf:"bytes,11,opt,name=WithdrawalCredentials,proto3" json:"WithdrawalCredentials,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_05ece1b682f6d016, []int{1}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Validator) GetEffectiveBalance() uint64 {
	if m != nil {
		return m.EffectiveBalance
	}
	return 0
}

func (m *Validator) GetSlashed() bool {
	if m != nil {
		return m.Slashed
	}
	return false
}

func (m *Validator) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Validator) GetExitEpoch() uint64 {
	if m != nil {
		return m.ExitEpoch
	}
	return 0
}

func (m *Validator) GetActivationEpoch() uint64 {
	if m != nil {
		return m.ActivationEpoch
	}
	return 0
}

func (m *Validator) GetActivationEligibilityEpoch() uint64 {
	if m != nil {
		return m.ActivationEligibilityEpoch
	}
	return 0
}

func (m *Validator) GetWithdrawableEpoch() uint64 {
	if m != nil {
		return m.WithdrawableEpoch
	}
	return 0
}

func (m *Validator) GetWithdrawalCredentials() []byte {
	if m != nil {
		return m.WithdrawalCredentials
	}
	return nil
}

type StateCommitment struct {
	StateRoot            []byte   `protobuf:"bytes,1,opt,name=StateRoot,proto3" json:"StateRoot,omitempty"`
	Epoch                []byte   `protobuf:"bytes,2,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	Committee            [][]byte `protobuf:"bytes,3,rep,name=Committee,proto3" json:"Committee,omitempty"`
	AuxCommitteesRoot    []byte   `protobuf:"bytes,4,opt,name=AuxCommitteesRoot,proto3" json:"AuxCommitteesRoot,omitempty"`
	NextCommittee        [][]byte `protobuf:"bytes,5,rep,name=NextCommittee,proto3" json:"NextCommittee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateCommitment) Reset()         { *m = StateCommitment{} }
func (m *StateCommitment) String() string { return proto.CompactTextString(m) }
func (*StateCommitment) ProtoMessage()    {}
func (*StateCommitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_05ece1b682f6d016, []int{2}
}
func (m *StateCommitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateCommitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateCommitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateCommitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateCommitment.Merge(m, src)
}
func (m *StateCommitment) XXX_Size() int {
	return m.Size()
}
func (m *StateCommitment) XXX_DiscardUnknown() {
	xxx_messageInfo_StateCommitment.DiscardUnknown(m)
}

var xxx_messageInfo_StateCommitment proto.InternalMessageInfo

func (m *StateCommitment) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *StateCommitment) GetEpoch() []byte {
	if m != nil {
		return m.Epoch
	}
	return nil
}

func (m *StateCommitment) GetCommittee() [][]byte {
	if m != nil {
		return m.Committee
	}
	return nil
}

func (m *StateCommitment) GetAuxCommitteesRoot() []byte {
	if m != nil {
		return m.AuxCommitteesRoot
	}
	return nil
}

func (m *StateCommitment) GetNextCommittee() [][]byte {
	if m != nil {
		return m.NextCommittee
	}
	return nil
}

type Fork struct {
	PreviousVersion      []byte   `protobuf:"bytes,1,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version,omitempty" ssz-size:"4"`
	CurrentVersion       []byte   `protobuf:"bytes,2,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty" ssz-size:"4"`
	Epoch                uint64   `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fork) Reset()         { *m = Fork{} }
func (m *Fork) String() string { return proto.CompactTextString(m) }
func (*Fork) ProtoMessage()    {}
func (*Fork) Descriptor() ([]byte, []int) {
	return fileDescriptor_05ece1b682f6d016, []int{3}
}
func (m *Fork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fork.Merge(m, src)
}
func (m *Fork) XXX_Size() int {
	return m.Size()
}
func (m *Fork) XXX_DiscardUnknown() {
	xxx_messageInfo_Fork.DiscardUnknown(m)
}

var xxx_messageInfo_Fork proto.InternalMessageInfo

func (m *Fork) GetPreviousVersion() []byte {
	if m != nil {
		return m.PreviousVersion
	}
	return nil
}

func (m *Fork) GetCurrentVersion() []byte {
	if m != nil {
		return m.CurrentVersion
	}
	return nil
}

func (m *Fork) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type ForkData struct {
	CurrentVersion       []byte   `protobuf:"bytes,1,opt,name=CurrentVersion,proto3" json:"CurrentVersion,omitempty" ssz-size:"4"`
	GenesisValidatorRoot []byte   `protobuf:"bytes,2,opt,name=GenesisValidatorRoot,proto3" json:"GenesisValidatorRoot,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForkData) Reset()         { *m = ForkData{} }
func (m *ForkData) String() string { return proto.CompactTextString(m) }
func (*ForkData) ProtoMessage()    {}
func (*ForkData) Descriptor() ([]byte, []int) {
	return fileDescriptor_05ece1b682f6d016, []int{4}
}
func (m *ForkData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForkData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForkData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForkData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForkData.Merge(m, src)
}
func (m *ForkData) XXX_Size() int {
	return m.Size()
}
func (m *ForkData) XXX_DiscardUnknown() {
	xxx_messageInfo_ForkData.DiscardUnknown(m)
}

var xxx_messageInfo_ForkData proto.InternalMessageInfo

func (m *ForkData) GetCurrentVersion() []byte {
	if m != nil {
		return m.CurrentVersion
	}
	return nil
}

func (m *ForkData) GetGenesisValidatorRoot() []byte {
	if m != nil {
		return m.GenesisValidatorRoot
	}
	return nil
}

type HistoricalBatch struct {
	BlockRoots           [][]byte `protobuf:"bytes,1,rep,name=BlockRoots,proto3" json:"BlockRoots,omitempty" ssz-size:"?,32" ssz-max:"8192"`
	StateRoots           [][]byte `protobuf:"bytes,2,rep,name=StateRoots,proto3" json:"StateRoots,omitempty" ssz-size:"?,32" ssz-max:"8192"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HistoricalBatch) Reset()         { *m = HistoricalBatch{} }
func (m *HistoricalBatch) String() string { return proto.CompactTextString(m) }
func (*HistoricalBatch) ProtoMessage()    {}
func (*HistoricalBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_05ece1b682f6d016, []int{5}
}
func (m *HistoricalBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalBatch.Merge(m, src)
}
func (m *HistoricalBatch) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalBatch.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalBatch proto.InternalMessageInfo

func (m *HistoricalBatch) GetBlockRoots() [][]byte {
	if m != nil {
		return m.BlockRoots
	}
	return nil
}

func (m *HistoricalBatch) GetStateRoots() [][]byte {
	if m != nil {
		return m.StateRoots
	}
	return nil
}

func init() {
	proto.RegisterType((*State)(nil), "core.State")
	proto.RegisterType((*Validator)(nil), "core.Validator")
	proto.RegisterType((*StateCommitment)(nil), "core.StateCommitment")
	proto.RegisterType((*Fork)(nil), "core.Fork")
	proto.RegisterType((*ForkData)(nil), "core.ForkData")
	proto.RegisterType((*HistoricalBatch)(nil), "core.HistoricalBatch")
}

func init() { proto.RegisterFile("src/core/types.proto", fileDescriptor_05ece1b682f6d016) }

var fileDescriptor_05ece1b682f6d016 = []byte{
	// 1077 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdf, 0x6e, 0x1b, 0xc5,
	0x17, 0xfe, 0x6d, 0xec, 0xa4, 0xc9, 0xc9, 0x1f, 0x27, 0xf3, 0x4b, 0xcb, 0xd4, 0x45, 0xb6, 0xd9,
	0x56, 0xc8, 0x8d, 0x1a, 0xbb, 0x76, 0x12, 0x3b, 0x69, 0x11, 0x55, 0xd6, 0x24, 0x0d, 0x50, 0x50,
	0xb4, 0xa9, 0x82, 0xc4, 0x0d, 0x1a, 0xaf, 0x27, 0xf6, 0x90, 0xf5, 0x8e, 0xd9, 0x19, 0x07, 0x27,
	0xaf, 0xc0, 0x0d, 0x12, 0x5c, 0xc0, 0x93, 0xf0, 0x0a, 0x5c, 0xf2, 0x04, 0x16, 0x0a, 0x6f, 0xe0,
	0x4b, 0xae, 0xd0, 0xce, 0xac, 0xbd, 0xfe, 0x1b, 0xa1, 0x8a, 0xbb, 0x9d, 0xef, 0x7c, 0xdf, 0x77,
	0xe6, 0xcf, 0x99, 0x33, 0x0b, 0x9b, 0xc2, 0x77, 0xf2, 0x0e, 0xf7, 0x69, 0x5e, 0x5e, 0xb7, 0xa8,
	0xc8, 0xb5, 0x7c, 0x2e, 0x39, 0x8a, 0x07, 0x48, 0x72, 0xbb, 0xce, 0x64, 0xa3, 0x5d, 0xcd, 0x39,
	0xbc, 0x99, 0xaf, 0xf3, 0x3a, 0xcf, 0xab, 0x60, 0xb5, 0x7d, 0xa1, 0x46, 0x6a, 0xa0, 0xbe, 0xb4,
	0x28, 0x19, 0x59, 0x55, 0x5d, 0xee, 0x5c, 0x86, 0x68, 0x72, 0x80, 0x12, 0x29, 0xa9, 0x90, 0x44,
	0x32, 0xee, 0xe9, 0x98, 0xf9, 0xe3, 0x32, 0xcc, 0x9f, 0x49, 0x22, 0x29, 0xca, 0xc0, 0xf2, 0x6b,
	0xea, 0x51, 0xc1, 0xc4, 0x5b, 0xd6, 0xa4, 0x18, 0x32, 0x46, 0x36, 0x6e, 0x0f, 0x43, 0x08, 0x41,
	0xfc, 0xcc, 0xe5, 0x12, 0x2f, 0xab, 0x90, 0xfa, 0x46, 0xaf, 0x60, 0xe3, 0x0d, 0x09, 0x4c, 0xad,
	0x20, 0xe1, 0x09, 0x25, 0x35, 0xea, 0xe3, 0x95, 0x8c, 0x91, 0x5d, 0x2e, 0x6e, 0xe4, 0x82, 0x9c,
	0xb9, 0xa1, 0x80, 0x3d, 0xc9, 0x45, 0x29, 0x88, 0x1f, 0x73, 0xff, 0x12, 0xaf, 0x2a, 0x0d, 0x68,
	0x4d, 0x80, 0xd8, 0x0a, 0x47, 0x16, 0x80, 0xa2, 0xdb, 0x9c, 0x4b, 0x81, 0xef, 0x67, 0x62, 0xd9,
	0x15, 0xcb, 0xec, 0x75, 0xd3, 0x29, 0x21, 0x6e, 0xb6, 0x05, 0xbb, 0xa1, 0x2f, 0xcc, 0x57, 0xcf,
	0x76, 0x8a, 0x66, 0x26, 0x18, 0x37, 0x49, 0xe7, 0x85, 0xb9, 0x5f, 0x38, 0x28, 0x9a, 0xf6, 0x90,
	0x2a, 0xf0, 0x50, 0x6b, 0xd4, 0x1e, 0x0f, 0xfe, 0xbd, 0x47, 0xa4, 0x42, 0x87, 0xb0, 0x64, 0x13,
	0xaf, 0x46, 0xf8, 0x17, 0xac, 0x83, 0xb1, 0xb2, 0x78, 0xdc, 0xeb, 0xa6, 0xd3, 0x33, 0x2d, 0x4a,
	0x7b, 0x7b, 0x3b, 0x25, 0xd3, 0x8e, 0x54, 0xe8, 0x14, 0x12, 0x27, 0x4c, 0x48, 0xee, 0x33, 0x87,
	0xb8, 0x7a, 0x2e, 0x0f, 0x95, 0xd1, 0x87, 0xbd, 0x6e, 0xda, 0x9c, 0x69, 0x54, 0x28, 0x95, 0xcb,
	0xe5, 0x62, 0xa1, 0x64, 0xda, 0xe3, 0x72, 0xf4, 0x1a, 0xee, 0x87, 0x07, 0x74, 0x4e, 0x5c, 0x56,
	0x23, 0x92, 0xfb, 0x22, 0x88, 0xe0, 0x64, 0xc6, 0xc8, 0xae, 0x58, 0x1b, 0xbd, 0x6e, 0x7a, 0x35,
	0xf2, 0xdd, 0x29, 0x9a, 0xf6, 0x74, 0x3e, 0xfa, 0x16, 0x1e, 0x9e, 0xfa, 0xf4, 0x8a, 0xf1, 0xb6,
	0x38, 0x6a, 0x71, 0xa7, 0x71, 0x18, 0x15, 0x8a, 0xc0, 0xe9, 0x4c, 0x2c, 0xbb, 0x5c, 0xc4, 0xfa,
	0x68, 0x4e, 0xa9, 0x57, 0x63, 0x5e, 0x7d, 0x88, 0x60, 0xa1, 0x5e, 0x37, 0xbd, 0x16, 0x4d, 0xf7,
	0x79, 0x71, 0xd7, 0xb4, 0x67, 0xdb, 0xa1, 0x06, 0xe0, 0x4a, 0xdb, 0xf7, 0xa9, 0x27, 0x27, 0x53,
	0x65, 0xde, 0x21, 0xd5, 0x4c, 0x37, 0xf4, 0x1d, 0x6c, 0x7c, 0xd6, 0x16, 0x92, 0x5d, 0x30, 0x47,
	0xcb, 0x99, 0x14, 0xf8, 0x03, 0xb5, 0x35, 0x95, 0x5e, 0x37, 0xbd, 0x12, 0x6d, 0x4d, 0xc1, 0xfc,
	0xbb, 0x9b, 0xce, 0x0f, 0x5d, 0xb6, 0x96, 0x7f, 0x2d, 0x9a, 0x44, 0x32, 0xc7, 0x25, 0x55, 0x91,
	0xaf, 0xf3, 0xed, 0x2a, 0x93, 0x17, 0x8c, 0xba, 0xb5, 0x9c, 0xc5, 0xe4, 0x15, 0x75, 0x24, 0xf7,
	0x77, 0xed, 0x49, 0x77, 0x64, 0xc3, 0xa3, 0xfe, 0xca, 0xc3, 0x20, 0xad, 0x55, 0x1a, 0xd4, 0xb9,
	0x6c, 0x71, 0xe6, 0x49, 0x6c, 0xaa, 0x2a, 0x5f, 0xd7, 0xeb, 0x8b, 0x70, 0xfb, 0x2e, 0x11, 0x3a,
	0x85, 0x64, 0xb8, 0xc4, 0x69, 0x96, 0x8f, 0x67, 0x58, 0xde, 0xa1, 0x41, 0x16, 0xfc, 0xff, 0x98,
	0x79, 0xc4, 0x65, 0x37, 0x23, 0x56, 0x4f, 0x66, 0x58, 0x4d, 0x23, 0xa3, 0x2d, 0x58, 0x3c, 0x92,
	0x8d, 0xc2, 0x27, 0x44, 0x12, 0x9c, 0x55, 0xc2, 0x35, 0x2d, 0x3c, 0x7a, 0x7b, 0xa2, 0x50, 0x7b,
	0x10, 0x47, 0xc7, 0xb0, 0xda, 0xff, 0x3e, 0xe7, 0x92, 0x0a, 0xfc, 0x54, 0x9d, 0xf3, 0x98, 0xc0,
	0x5a, 0xef, 0x1f, 0x4a, 0x58, 0xf7, 0xa6, 0x3d, 0x2a, 0x43, 0x5b, 0xb0, 0xae, 0x00, 0xda, 0xe2,
	0x82, 0xc9, 0x4f, 0xbd, 0x1a, 0xed, 0xe0, 0x2d, 0xd5, 0x8d, 0x26, 0x70, 0xf4, 0x06, 0x20, 0x2a,
	0x72, 0x5c, 0x54, 0x09, 0x13, 0x3a, 0xe1, 0x00, 0xb7, 0x1e, 0xf5, 0xba, 0xe9, 0xf7, 0x86, 0xea,
	0xe9, 0xe0, 0x60, 0xaf, 0x50, 0x28, 0x15, 0xcb, 0xe5, 0x72, 0xc9, 0xb4, 0x87, 0xf4, 0xa8, 0x0c,
	0x8b, 0x16, 0x71, 0x89, 0xe7, 0x50, 0x81, 0x77, 0x32, 0xb1, 0x6c, 0xfc, 0x6e, 0xe9, 0x80, 0x8c,
	0x9e, 0xc3, 0xd2, 0x99, 0x4b, 0x44, 0x83, 0x79, 0x75, 0x81, 0x3f, 0x52, 0xca, 0xd1, 0x22, 0xd6,
	0xad, 0x26, 0x22, 0x99, 0x3f, 0xc5, 0x60, 0x69, 0x90, 0x19, 0x3d, 0x85, 0x85, 0xd3, 0x76, 0xf5,
	0x73, 0x7a, 0x8d, 0xe7, 0xa6, 0xdd, 0xe9, 0xdd, 0x7d, 0xd3, 0x0e, 0x09, 0x6a, 0x77, 0x2e, 0x2e,
	0xa8, 0x23, 0xd9, 0x15, 0x0d, 0xf3, 0xe3, 0x58, 0xb8, 0x3b, 0x63, 0x38, 0xc2, 0x70, 0x4f, 0x65,
	0xa4, 0x35, 0x3c, 0x9f, 0x31, 0xb2, 0x8b, 0x76, 0x7f, 0x88, 0x1e, 0xc0, 0xc2, 0xa1, 0xa2, 0xe2,
	0x05, 0x15, 0x08, 0x47, 0xe8, 0x7d, 0x58, 0x3a, 0xea, 0x30, 0x7d, 0xcb, 0xf0, 0x3d, 0x65, 0x1b,
	0x01, 0x28, 0x0b, 0x09, 0xc5, 0x53, 0x37, 0x41, 0x73, 0x16, 0x15, 0x67, 0x1c, 0x46, 0x1f, 0x43,
	0x72, 0x08, 0x72, 0x59, 0x9d, 0x55, 0x99, 0xcb, 0xe4, 0xb5, 0x16, 0x2d, 0x29, 0xd1, 0x1d, 0x0c,
	0xf4, 0x0c, 0x36, 0xbe, 0x62, 0xb2, 0x51, 0xf3, 0xc9, 0xf7, 0xa4, 0xea, 0x52, 0x2d, 0xd3, 0xaf,
	0xd5, 0x64, 0x20, 0xe8, 0x90, 0x03, 0xd0, 0xad, 0xf8, 0xb4, 0x46, 0x3d, 0xc9, 0x88, 0x2b, 0xd4,
	0x23, 0x36, 0xbd, 0x43, 0x4e, 0xe5, 0x9b, 0xbf, 0x19, 0x90, 0x50, 0xcf, 0x41, 0x85, 0x37, 0x9b,
	0x4c, 0x36, 0xa9, 0x27, 0x83, 0x2d, 0x19, 0xbc, 0x10, 0xd8, 0x08, 0x0c, 0xed, 0x08, 0x40, 0x9b,
	0x30, 0xaf, 0x27, 0xa7, 0x0e, 0xce, 0xd6, 0x83, 0x40, 0xa3, 0x1d, 0x24, 0x0d, 0x4e, 0x27, 0x16,
	0x68, 0x06, 0x40, 0xb0, 0xb8, 0xc3, 0x76, 0x67, 0x30, 0xd6, 0xcd, 0x3c, 0xae, 0xf4, 0x93, 0x01,
	0xf4, 0x04, 0x56, 0xbf, 0xa4, 0x1d, 0x19, 0xf9, 0xcd, 0x2b, 0xbf, 0x51, 0xd0, 0xfc, 0xd9, 0xd0,
	0x4f, 0x2c, 0x7a, 0x09, 0xeb, 0xad, 0xb0, 0xcd, 0x7c, 0x73, 0x45, 0x7d, 0xc1, 0xb8, 0xa7, 0x67,
	0x1d, 0x5d, 0xbc, 0xb0, 0xa8, 0x4c, 0x3b, 0xd1, 0x67, 0x9e, 0x6b, 0x22, 0x3a, 0x80, 0x84, 0xa3,
	0x1b, 0xca, 0x40, 0x3b, 0x37, 0x43, 0xbb, 0x16, 0x12, 0xfb, 0xd2, 0x4d, 0x98, 0xa7, 0x6a, 0x23,
	0x74, 0x31, 0xea, 0x81, 0xf9, 0x83, 0x01, 0x8b, 0xc1, 0xb4, 0x54, 0x83, 0xd8, 0x87, 0xb5, 0xca,
	0x88, 0x68, 0xe6, 0xc4, 0xc6, 0x78, 0xe8, 0x08, 0x36, 0xc7, 0x9f, 0x34, 0xb5, 0x69, 0x73, 0xb3,
	0xce, 0x77, 0x2a, 0xdd, 0xfc, 0xd5, 0x18, 0x7e, 0x9c, 0x2d, 0x22, 0x9d, 0xc6, 0xd8, 0xaf, 0x87,
	0xf1, 0x1f, 0xfc, 0x7a, 0xcc, 0xbd, 0xcb, 0xaf, 0x87, 0x85, 0x7f, 0xbf, 0x4d, 0x19, 0x7f, 0xdc,
	0xa6, 0x8c, 0x3f, 0x6f, 0x53, 0xc6, 0x2f, 0x7f, 0xa5, 0xfe, 0xf7, 0xf5, 0x42, 0xee, 0x65, 0xd0,
	0xc8, 0xaa, 0x0b, 0xea, 0x27, 0x6e, 0xe7, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xe7, 0xfe,
	0xc6, 0x43, 0x0a, 0x00, 0x00,
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Slashings) > 0 {
		dAtA2 := make([]byte, len(m.Slashings)*10)
		var j1 int
		for _, num := range m.Slashings {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if len(m.Balances) > 0 {
		dAtA4 := make([]byte, len(m.Balances)*10)
		var j3 int
		for _, num := range m.Balances {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTypes(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x92
		}
	}
	if m.Eth1DepositIndex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Eth1DepositIndex))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if len(m.Eth1DataVotes) > 0 {
		for iNdEx := len(m.Eth1DataVotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Eth1DataVotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xca
		}
	}
	if m.Eth1Data != nil {
		{
			size, err := m.Eth1Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.FinalizedCheckpoint != nil {
		{
			size, err := m.FinalizedCheckpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.CurrentJustifiedCheckpoint != nil {
		{
			size, err := m.CurrentJustifiedCheckpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.PreviousJustifiedCheckpoint != nil {
		{
			size, err := m.PreviousJustifiedCheckpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if len(m.JustificationBits) > 0 {
		i -= len(m.JustificationBits)
		copy(dAtA[i:], m.JustificationBits)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.JustificationBits)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if len(m.CurrentEpochAttestations) > 0 {
		for iNdEx := len(m.CurrentEpochAttestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentEpochAttestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.PreviousEpochAttestations) > 0 {
		for iNdEx := len(m.PreviousEpochAttestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PreviousEpochAttestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.GenesisValidatorsRoot) > 0 {
		i -= len(m.GenesisValidatorsRoot)
		copy(dAtA[i:], m.GenesisValidatorsRoot)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.GenesisValidatorsRoot)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.HistoricalRoots) > 0 {
		for iNdEx := len(m.HistoricalRoots) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.HistoricalRoots[iNdEx])
			copy(dAtA[i:], m.HistoricalRoots[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.HistoricalRoots[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.RandaoMix) > 0 {
		for iNdEx := len(m.RandaoMix) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RandaoMix[iNdEx])
			copy(dAtA[i:], m.RandaoMix[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RandaoMix[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.StateRoots) > 0 {
		for iNdEx := len(m.StateRoots) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StateRoots[iNdEx])
			copy(dAtA[i:], m.StateRoots[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.StateRoots[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.BlockRoots) > 0 {
		for iNdEx := len(m.BlockRoots) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlockRoots[iNdEx])
			copy(dAtA[i:], m.BlockRoots[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.BlockRoots[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.Fork != nil {
		{
			size, err := m.Fork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.LatestBlockHeader != nil {
		{
			size, err := m.LatestBlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Slot != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x58
	}
	if m.GenesisTime != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GenesisTime))
		i--
		dAtA[i] = 0x50
	}
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.WithdrawalCredentials) > 0 {
		i -= len(m.WithdrawalCredentials)
		copy(dAtA[i:], m.WithdrawalCredentials)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.WithdrawalCredentials)))
		i--
		dAtA[i] = 0x5a
	}
	if m.WithdrawableEpoch != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.WithdrawableEpoch))
		i--
		dAtA[i] = 0x50
	}
	if m.ActivationEligibilityEpoch != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ActivationEligibilityEpoch))
		i--
		dAtA[i] = 0x48
	}
	if m.ActivationEpoch != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ActivationEpoch))
		i--
		dAtA[i] = 0x40
	}
	if m.ExitEpoch != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ExitEpoch))
		i--
		dAtA[i] = 0x38
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Slashed {
		i--
		if m.Slashed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.EffectiveBalance != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EffectiveBalance))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *StateCommitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateCommitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateCommitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NextCommittee) > 0 {
		for iNdEx := len(m.NextCommittee) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NextCommittee[iNdEx])
			copy(dAtA[i:], m.NextCommittee[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.NextCommittee[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AuxCommitteesRoot) > 0 {
		i -= len(m.AuxCommitteesRoot)
		copy(dAtA[i:], m.AuxCommitteesRoot)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AuxCommitteesRoot)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Committee) > 0 {
		for iNdEx := len(m.Committee) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Committee[iNdEx])
			copy(dAtA[i:], m.Committee[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Committee[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Epoch) > 0 {
		i -= len(m.Epoch)
		copy(dAtA[i:], m.Epoch)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Epoch)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Fork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Epoch != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CurrentVersion) > 0 {
		i -= len(m.CurrentVersion)
		copy(dAtA[i:], m.CurrentVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CurrentVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PreviousVersion) > 0 {
		i -= len(m.PreviousVersion)
		copy(dAtA[i:], m.PreviousVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PreviousVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ForkData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForkData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForkData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GenesisValidatorRoot) > 0 {
		i -= len(m.GenesisValidatorRoot)
		copy(dAtA[i:], m.GenesisValidatorRoot)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.GenesisValidatorRoot)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CurrentVersion) > 0 {
		i -= len(m.CurrentVersion)
		copy(dAtA[i:], m.CurrentVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CurrentVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoricalBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StateRoots) > 0 {
		for iNdEx := len(m.StateRoots) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StateRoots[iNdEx])
			copy(dAtA[i:], m.StateRoots[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.StateRoots[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BlockRoots) > 0 {
		for iNdEx := len(m.BlockRoots) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlockRoots[iNdEx])
			copy(dAtA[i:], m.BlockRoots[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.BlockRoots[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GenesisTime != 0 {
		n += 1 + sovTypes(uint64(m.GenesisTime))
	}
	if m.Slot != 0 {
		n += 1 + sovTypes(uint64(m.Slot))
	}
	if m.LatestBlockHeader != nil {
		l = m.LatestBlockHeader.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Fork != nil {
		l = m.Fork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.BlockRoots) > 0 {
		for _, b := range m.BlockRoots {
			l = len(b)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.StateRoots) > 0 {
		for _, b := range m.StateRoots {
			l = len(b)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RandaoMix) > 0 {
		for _, b := range m.RandaoMix {
			l = len(b)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.HistoricalRoots) > 0 {
		for _, b := range m.HistoricalRoots {
			l = len(b)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.GenesisValidatorsRoot)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.PreviousEpochAttestations) > 0 {
		for _, e := range m.PreviousEpochAttestations {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.CurrentEpochAttestations) > 0 {
		for _, e := range m.CurrentEpochAttestations {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.JustificationBits)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.PreviousJustifiedCheckpoint != nil {
		l = m.PreviousJustifiedCheckpoint.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.CurrentJustifiedCheckpoint != nil {
		l = m.CurrentJustifiedCheckpoint.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.FinalizedCheckpoint != nil {
		l = m.FinalizedCheckpoint.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Eth1Data != nil {
		l = m.Eth1Data.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.Eth1DataVotes) > 0 {
		for _, e := range m.Eth1DataVotes {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.Eth1DepositIndex != 0 {
		n += 2 + sovTypes(uint64(m.Eth1DepositIndex))
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Balances) > 0 {
		l = 0
		for _, e := range m.Balances {
			l += sovTypes(uint64(e))
		}
		n += 2 + sovTypes(uint64(l)) + l
	}
	if len(m.Slashings) > 0 {
		l = 0
		for _, e := range m.Slashings {
			l += sovTypes(uint64(e))
		}
		n += 2 + sovTypes(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EffectiveBalance != 0 {
		n += 1 + sovTypes(uint64(m.EffectiveBalance))
	}
	if m.Slashed {
		n += 2
	}
	if m.Active {
		n += 2
	}
	if m.ExitEpoch != 0 {
		n += 1 + sovTypes(uint64(m.ExitEpoch))
	}
	if m.ActivationEpoch != 0 {
		n += 1 + sovTypes(uint64(m.ActivationEpoch))
	}
	if m.ActivationEligibilityEpoch != 0 {
		n += 1 + sovTypes(uint64(m.ActivationEligibilityEpoch))
	}
	if m.WithdrawableEpoch != 0 {
		n += 1 + sovTypes(uint64(m.WithdrawableEpoch))
	}
	l = len(m.WithdrawalCredentials)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateCommitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Epoch)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Committee) > 0 {
		for _, b := range m.Committee {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.AuxCommitteesRoot)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.NextCommittee) > 0 {
		for _, b := range m.NextCommittee {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Fork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PreviousVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CurrentVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovTypes(uint64(m.Epoch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForkData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.GenesisValidatorRoot)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HistoricalBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockRoots) > 0 {
		for _, b := range m.BlockRoots {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.StateRoots) > 0 {
		for _, b := range m.StateRoots {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisTime", wireType)
			}
			m.GenesisTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GenesisTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestBlockHeader == nil {
				m.LatestBlockHeader = &BlockHeader{}
			}
			if err := m.LatestBlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fork == nil {
				m.Fork = &Fork{}
			}
			if err := m.Fork.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRoots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockRoots = append(m.BlockRoots, make([]byte, postIndex-iNdEx))
			copy(m.BlockRoots[len(m.BlockRoots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoots = append(m.StateRoots, make([]byte, postIndex-iNdEx))
			copy(m.StateRoots[len(m.StateRoots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandaoMix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandaoMix = append(m.RandaoMix, make([]byte, postIndex-iNdEx))
			copy(m.RandaoMix[len(m.RandaoMix)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalRoots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoricalRoots = append(m.HistoricalRoots, make([]byte, postIndex-iNdEx))
			copy(m.HistoricalRoots[len(m.HistoricalRoots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisValidatorsRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisValidatorsRoot = append(m.GenesisValidatorsRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisValidatorsRoot == nil {
				m.GenesisValidatorsRoot = []byte{}
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousEpochAttestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousEpochAttestations = append(m.PreviousEpochAttestations, &PendingAttestation{})
			if err := m.PreviousEpochAttestations[len(m.PreviousEpochAttestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochAttestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentEpochAttestations = append(m.CurrentEpochAttestations, &PendingAttestation{})
			if err := m.CurrentEpochAttestations[len(m.CurrentEpochAttestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JustificationBits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JustificationBits = append(m.JustificationBits[:0], dAtA[iNdEx:postIndex]...)
			if m.JustificationBits == nil {
				m.JustificationBits = []byte{}
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousJustifiedCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousJustifiedCheckpoint == nil {
				m.PreviousJustifiedCheckpoint = &Checkpoint{}
			}
			if err := m.PreviousJustifiedCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentJustifiedCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentJustifiedCheckpoint == nil {
				m.CurrentJustifiedCheckpoint = &Checkpoint{}
			}
			if err := m.CurrentJustifiedCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinalizedCheckpoint == nil {
				m.FinalizedCheckpoint = &Checkpoint{}
			}
			if err := m.FinalizedCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth1Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Eth1Data == nil {
				m.Eth1Data = &ETH1Data{}
			}
			if err := m.Eth1Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth1DataVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eth1DataVotes = append(m.Eth1DataVotes, &ETH1Data{})
			if err := m.Eth1DataVotes[len(m.Eth1DataVotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth1DepositIndex", wireType)
			}
			m.Eth1DepositIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eth1DepositIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Balances = append(m.Balances, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Balances) == 0 {
					m.Balances = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Balances = append(m.Balances, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
		case 60:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Slashings = append(m.Slashings, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Slashings) == 0 {
					m.Slashings = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Slashings = append(m.Slashings, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Slashings", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveBalance", wireType)
			}
			m.EffectiveBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectiveBalance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slashed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Slashed = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitEpoch", wireType)
			}
			m.ExitEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationEpoch", wireType)
			}
			m.ActivationEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationEligibilityEpoch", wireType)
			}
			m.ActivationEligibilityEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationEligibilityEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawableEpoch", wireType)
			}
			m.WithdrawableEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawableEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalCredentials", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalCredentials = append(m.WithdrawalCredentials[:0], dAtA[iNdEx:postIndex]...)
			if m.WithdrawalCredentials == nil {
				m.WithdrawalCredentials = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateCommitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateCommitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateCommitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Epoch = append(m.Epoch[:0], dAtA[iNdEx:postIndex]...)
			if m.Epoch == nil {
				m.Epoch = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Committee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Committee = append(m.Committee, make([]byte, postIndex-iNdEx))
			copy(m.Committee[len(m.Committee)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuxCommitteesRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuxCommitteesRoot = append(m.AuxCommitteesRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.AuxCommitteesRoot == nil {
				m.AuxCommitteesRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCommittee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextCommittee = append(m.NextCommittee, make([]byte, postIndex-iNdEx))
			copy(m.NextCommittee[len(m.NextCommittee)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousVersion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousVersion = append(m.PreviousVersion[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousVersion == nil {
				m.PreviousVersion = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVersion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentVersion = append(m.CurrentVersion[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentVersion == nil {
				m.CurrentVersion = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForkData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForkData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForkData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVersion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentVersion = append(m.CurrentVersion[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentVersion == nil {
				m.CurrentVersion = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisValidatorRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisValidatorRoot = append(m.GenesisValidatorRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisValidatorRoot == nil {
				m.GenesisValidatorRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoricalBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRoots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockRoots = append(m.BlockRoots, make([]byte, postIndex-iNdEx))
			copy(m.BlockRoots[len(m.BlockRoots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoots = append(m.StateRoots, make([]byte, postIndex-iNdEx))
			copy(m.StateRoots[len(m.StateRoots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
